services:

  camera-1-service:
    hostname: camera-1-service
    container_name: camera-1-service
    build: ./camera-service
    networks:
      - healthy-cameras
    expose:
      - 8080
    environment:
      CAMERA_NO: 1
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8080/api/v1/hc/actuator/health || exit 1"]
      interval: 5s
      retries: 30

  camera-2-service:
    hostname: camera-2-service
    container_name: camera-2-service
    build: ./camera-service
    networks:
      - healthy-cameras
    expose:
      - 8080
    environment:
      CAMERA_NO: 2
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8080/api/v1/hc/actuator/health || exit 1"]
      interval: 5s
      retries: 30

  camera-3-service:
    hostname: camera-3-service
    container_name: camera-3-service
    build: ./camera-service
    networks:
      - healthy-cameras
    expose:
      - 8080
    environment:
      CAMERA_NO: 3
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8080/api/v1/hc/actuator/health || exit 1"]
      interval: 5s
      retries: 30

  camera-4-service:
    hostname: camera-4-service
    container_name: camera-4-service
    build: ./camera-service
    networks:
      - healthy-cameras
    expose:
      - 8080
    environment:
      CAMERA_NO: 4
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8080/api/v1/hc/actuator/health || exit 1"]
      interval: 5s
      retries: 30

  camera-5-service:
    hostname: camera-5-service
    container_name: camera-5-service
    build: ./camera-service
    networks:
      - healthy-cameras
    expose:
      - 8080
    environment:
      CAMERA_NO: 5
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8080/api/v1/hc/actuator/health || exit 1"]
      interval: 5s
      retries: 30

  camera-6-service:
    hostname: camera-6-service
    container_name: camera-6-service
    build: ./camera-service
    networks:
      - healthy-cameras
    expose:
      - 8080
    environment:
      CAMERA_NO: 6
    depends_on:
      kong-database:
        condition: service_healthy
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -I -s -L http://127.0.0.1:8080/api/v1/hc/actuator/health || exit 1"]
      interval: 5s
      retries: 30

  kong-database:
    hostname: kong-database
    build:
      context: docker-images/docker-psql/.
    env_file: docker-images/docker-psql/.env
    user: postgres
    volumes:
      - ./docker-images/docker-psql/init-scripts:/docker-entrypoint-initdb.d
    expose:
      - 5432
    container_name: kong-database
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong_password
      - POSTGRES_MULTIPLE_DATABASES=hc,postgres
      - POSTGRES_FOLDER_MAPPING=true
    image: postgres
    networks:
      - healthy-cameras
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong
    depends_on:
      kong-database:
        condition: service_healthy
    container_name: kong-migration
    networks:
      - healthy-cameras
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_PASSWORD=kong_password
    command: kong migrations bootstrap && kong migrations up && kong migrations finish

  prometheus:
    image: prom/prometheus
    hostname: prometheus
    container_name: prometheus
    networks:
      - healthy-cameras
    volumes:
      - ./docker-images/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    expose:
      - 9090
    healthcheck:
      test: ["CMD", "wget", "http://localhost:9090"]
      interval: 5s
      retries: 30
    depends_on:
      kong-database:
        condition: service_healthy

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - healthy-cameras
    hostname: grafana
    volumes:
      - ./docker-images/grafana/provisioning/:/etc/grafana/provisioning
    expose:
      - 3000
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/3000' || exit 1
      interval: 5s
      retries: 30
    depends_on:
      kong-database:
        condition: service_healthy

  kong:
    container_name: kong
    image: kong
    networks:
      - healthy-cameras
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_PASSWORD=kong_password
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    expose:
      - 8000
      - 8001
      - 8443
      - 8444
      - 8125
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8001' || exit 1
      interval: 5s
      retries: 30
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully

  nginx:
    hostname: nginx
    container_name: nginx
    build:
      context: docker-images/nginx/.
    expose:
      - 8090
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 300M
    networks:
      - healthy-cameras
    volumes:
      - ${PWD}/cameras-gui/dist/cameras-gui:/usr/share/nginx/html
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8090' || exit 1
      interval: 5s
      retries: 30
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
      kong:
        condition: service_healthy
      grafana:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      graphite:
        condition: service_healthy
      camera-1-service:
        condition: service_healthy
      camera-2-service:
        condition: service_healthy
      camera-3-service:
        condition: service_healthy
      camera-4-service:
        condition: service_healthy
      camera-5-service:
        condition: service_healthy
      camera-6-service:
        condition: service_healthy

  graphite:
    container_name: graphite
    hostname: graphite
    build: ./docker-images/graphite/.
    expose:
      - 8085
      - 2003-2004
      - 2023-2024
      - 8125
      - 8126
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8085' || exit 1
      interval: 5s
      retries: 30
    networks:
      - healthy-cameras

  openldap:
    hostname: openldap
    container_name: openldap
    image: bitnami/openldap
    environment:
      LDAP_ROOT: dc=example,dc=org
      LDAP_PORT_NUMBER: 1389
      LDAP_ADMIN_USERNAME: admin
      LDAP_ADMIN_PASSWORD: password
      LDAP_USERS: camera5
      LDAP_PASSWORDS: admin
    networks:
      - healthy-cameras

networks:
  healthy-cameras:
